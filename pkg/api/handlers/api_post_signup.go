/*
 * Veritone Build and Release API
 *
 * Build and release API for Veritone
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package handlers

import (
	"encoding/json"
	"golang.org/x/crypto/bcrypt"
	"net/http"

	log "github.com/sirupsen/logrus"

	"github.com/aeekayy/go-api-base/pkg/models"
)

const (
	postSignupQueryCols = "username"
	//postSignupQueryDistinctCols = "service_id,environment_id"
	postSignupQueryTableName = "users"
)

// PostSignup for user signup handler
type PostSignup struct {
	BaseHandler
}

// PostSignupRequest req object for POST signup
type PostSignupRequest struct {
	Username string `json:"username" yaml:"username"`
	Password string `json:"password" yaml:"password"`
}

// PostSignupResponseData represents the data object in the response for POST signup
type PostSignupResponseData struct {
	Username string `json:"username" yaml:"username"`
	Token    string `json:"token" yaml:"token"`
}

// PostSignupResponse response for POST signup
type PostSignupResponse struct {
	Status int                    `json:"status" yaml:"status"`
	Data   PostSignupResponseData `json:"data" yaml:"data"`
}

// ServeHTTP the handler for POST signup
func (h PostSignup) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.Name = "PostSignupRoute"
	h.Category = CategoryUser

	var req PostSignupRequest
	var user models.User

	allowedOrigin, err := ReturnAccessControlAllowOrigin(h.CORS, r.Header.Get("Origin"))
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	w.Header().Set("Access-Control-Allow-Origin", allowedOrigin)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	if r.Method == http.MethodOptions {
		return
	}

	err = json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	if req.Username == "" || req.Password == "" {
		http.Error(w, "Invalid user signup details. Provide valid username or password.", http.StatusUnauthorized)
		return
	}

	// check for existing user
	var existingUser models.User
	h.DB.Where("username = ?", req.Username).First(&existingUser)

	if existingUser.Username != "" {
		http.Error(w, "User exists. Can't use this username.", http.StatusBadRequest)
		return
	}

	// encrypt the password
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), 8)

	if err != nil {
		http.Error(w, "Query error", http.StatusBadRequest)
		return
	}

	user = models.User{
		Username: req.Username,
		Password: string(hashedPassword),
	}

	// retrieve the result
	/*h.DB.Clauses(clause.OnConflict{
		Columns:   []clause.Column{{Name: "username"}},
		DoNothing: true,
	}).Select("Username", "Kvp").Create(&user)*/
	h.DB.Select("Username", "Password", "Kvp").Create(&user)

	token, err := CreateToken(user.Username, h.Config)
	if err != nil {
		http.Error(w, err.Error(), http.StatusUnprocessableEntity)
		return
	}

	// create data response
	response := PostSignupResponseData{
		Username: req.Username,
		Token:    token,
	}

	// wrap the result in a response
	resp := PostSignupResponse{
		Status: http.StatusOK,
		Data:   response,
	}

	respJSON, err := json.Marshal(resp)
	if err != nil {
		log.Error("Could not retrieve event errors")
		http.Error(w, "Could not retrieve data", http.StatusUnprocessableEntity)
		return
	}

	w.WriteHeader(http.StatusOK)

	_, err = w.Write([]byte(respJSON))

	if err != nil {
		log.Errorf("error sending response for %s: %s", h.Name, err)
	}
}
