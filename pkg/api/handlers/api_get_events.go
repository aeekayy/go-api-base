/*
 * Veritone Build and Release API
 *
 * Build and release API for Veritone
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package handlers

import (
	"encoding/json"
	"net/http"

	log "github.com/sirupsen/logrus"

	"github.com/aeekayy/go-api-base/pkg/models"
)

const (
	getEventsQueryCols         = "event_id,name,kvp,created_date_time,updated_date_time"
	getEventsQueryDistinctCols = "service_id,environment_id"
	getEventsQueryTableName    = "events"
)

// GetEvents object that represents the GET events handler
type GetEvents struct {
	BaseHandler
}

// GetEventsRequest request for GET events
type GetEventsRequest struct {
	Limit int `json:"limit" yaml:"limit"`
}

// GetEventsResponse the response object for GET events
type GetEventsResponse struct {
	Status int            `json:"status" yaml:"status"`
	Data   []models.Event `json:"data" yaml:"data"`
}

// ServeHTTP the handler for GetEvents
func (h GetEvents) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.Name = "GetEventsRoute"
	h.Category = CategoryEvent

	// retrieve the result
	var getEvents []models.Event
	if err := h.DB.Raw("select " + getEventsQueryCols + " from " + getEventsQueryTableName + ";").Scan(&getEvents).Error; err != nil {
		http.Error(w, "Query error", http.StatusBadRequest)
		return
	}

	// wrap the result in a response
	resp := GetEventsResponse{
		Status: http.StatusOK,
		Data:   getEvents,
	}

	respJSON, err := json.Marshal(resp)
	if err != nil {
		log.Error("Could not retrieve event errors")
		http.Error(w, "Could not retrieve data", http.StatusUnprocessableEntity)
		return
	}

	h.WriteJSON(w, http.StatusOK, respJSON)
}
